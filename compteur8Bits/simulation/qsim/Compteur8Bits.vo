// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.1.0 Build 590 10/25/2017 SJ Lite Edition"

// DATE "09/27/2021 15:55:40"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Compteur8Bits (
	Clk,
	Signal,
	Q);
input 	Clk;
input 	Signal;
output 	[0:7] Q;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Q[7]~output_o ;
wire \Q[6]~output_o ;
wire \Q[5]~output_o ;
wire \Q[4]~output_o ;
wire \Q[3]~output_o ;
wire \Q[2]~output_o ;
wire \Q[1]~output_o ;
wire \Q[0]~output_o ;
wire \Clk~input_o ;
wire \Q[7]~8_combout ;
wire \Signal~input_o ;
wire \Signal_prec~q ;
wire \always0~0_combout ;
wire \Q[7]~reg0_q ;
wire \Q[7]~9 ;
wire \Q[6]~10_combout ;
wire \Q[6]~reg0_q ;
wire \Q[6]~11 ;
wire \Q[5]~12_combout ;
wire \Q[5]~reg0_q ;
wire \Q[5]~13 ;
wire \Q[4]~14_combout ;
wire \Q[4]~reg0_q ;
wire \Q[4]~15 ;
wire \Q[3]~16_combout ;
wire \Q[3]~reg0_q ;
wire \Q[3]~17 ;
wire \Q[2]~18_combout ;
wire \Q[2]~reg0_q ;
wire \Q[2]~19 ;
wire \Q[1]~20_combout ;
wire \Q[1]~reg0_q ;
wire \Q[1]~21 ;
wire \Q[0]~22_combout ;
wire \Q[0]~reg0_q ;


cycloneive_io_obuf \Q[7]~output (
	.i(\Q[7]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[7]~output .bus_hold = "false";
defparam \Q[7]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[6]~output (
	.i(\Q[6]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[6]~output .bus_hold = "false";
defparam \Q[6]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[5]~output (
	.i(\Q[5]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[5]~output .bus_hold = "false";
defparam \Q[5]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[4]~output (
	.i(\Q[4]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[4]~output .bus_hold = "false";
defparam \Q[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[3]~output (
	.i(\Q[3]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[3]~output .bus_hold = "false";
defparam \Q[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[2]~output (
	.i(\Q[2]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[2]~output .bus_hold = "false";
defparam \Q[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[1]~output (
	.i(\Q[1]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[1]~output .bus_hold = "false";
defparam \Q[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[0]~output (
	.i(\Q[0]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[0]~output .bus_hold = "false";
defparam \Q[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Clk~input (
	.i(Clk),
	.ibar(gnd),
	.o(\Clk~input_o ));
// synopsys translate_off
defparam \Clk~input .bus_hold = "false";
defparam \Clk~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \Q[7]~8 (
// Equation(s):
// \Q[7]~8_combout  = \Q[7]~reg0_q  $ (VCC)
// \Q[7]~9  = CARRY(\Q[7]~reg0_q )

	.dataa(\Q[7]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(gnd),
	.combout(\Q[7]~8_combout ),
	.cout(\Q[7]~9 ));
// synopsys translate_off
defparam \Q[7]~8 .lut_mask = 16'h55AA;
defparam \Q[7]~8 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Signal~input (
	.i(Signal),
	.ibar(gnd),
	.o(\Signal~input_o ));
// synopsys translate_off
defparam \Signal~input .bus_hold = "false";
defparam \Signal~input .simulate_z_as = "z";
// synopsys translate_on

dffeas Signal_prec(
	.clk(\Clk~input_o ),
	.d(\Signal~input_o ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Signal_prec~q ),
	.prn(vcc));
// synopsys translate_off
defparam Signal_prec.is_wysiwyg = "true";
defparam Signal_prec.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \always0~0 (
// Equation(s):
// \always0~0_combout  = (\Signal~input_o  & !\Signal_prec~q )

	.dataa(\Signal~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(\Signal_prec~q ),
	.cin(gnd),
	.combout(\always0~0_combout ),
	.cout());
// synopsys translate_off
defparam \always0~0 .lut_mask = 16'h00AA;
defparam \always0~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \Q[7]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[7]~8_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[7]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[7]~reg0 .is_wysiwyg = "true";
defparam \Q[7]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[6]~10 (
// Equation(s):
// \Q[6]~10_combout  = (\Q[6]~reg0_q  & (!\Q[7]~9 )) # (!\Q[6]~reg0_q  & ((\Q[7]~9 ) # (GND)))
// \Q[6]~11  = CARRY((!\Q[7]~9 ) # (!\Q[6]~reg0_q ))

	.dataa(\Q[6]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[7]~9 ),
	.combout(\Q[6]~10_combout ),
	.cout(\Q[6]~11 ));
// synopsys translate_off
defparam \Q[6]~10 .lut_mask = 16'h5A5F;
defparam \Q[6]~10 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[6]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[6]~10_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[6]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[6]~reg0 .is_wysiwyg = "true";
defparam \Q[6]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[5]~12 (
// Equation(s):
// \Q[5]~12_combout  = (\Q[5]~reg0_q  & (\Q[6]~11  $ (GND))) # (!\Q[5]~reg0_q  & (!\Q[6]~11  & VCC))
// \Q[5]~13  = CARRY((\Q[5]~reg0_q  & !\Q[6]~11 ))

	.dataa(\Q[5]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[6]~11 ),
	.combout(\Q[5]~12_combout ),
	.cout(\Q[5]~13 ));
// synopsys translate_off
defparam \Q[5]~12 .lut_mask = 16'hA50A;
defparam \Q[5]~12 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[5]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[5]~12_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[5]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[5]~reg0 .is_wysiwyg = "true";
defparam \Q[5]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[4]~14 (
// Equation(s):
// \Q[4]~14_combout  = (\Q[4]~reg0_q  & (!\Q[5]~13 )) # (!\Q[4]~reg0_q  & ((\Q[5]~13 ) # (GND)))
// \Q[4]~15  = CARRY((!\Q[5]~13 ) # (!\Q[4]~reg0_q ))

	.dataa(\Q[4]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[5]~13 ),
	.combout(\Q[4]~14_combout ),
	.cout(\Q[4]~15 ));
// synopsys translate_off
defparam \Q[4]~14 .lut_mask = 16'h5A5F;
defparam \Q[4]~14 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[4]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[4]~14_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[4]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[4]~reg0 .is_wysiwyg = "true";
defparam \Q[4]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[3]~16 (
// Equation(s):
// \Q[3]~16_combout  = (\Q[3]~reg0_q  & (\Q[4]~15  $ (GND))) # (!\Q[3]~reg0_q  & (!\Q[4]~15  & VCC))
// \Q[3]~17  = CARRY((\Q[3]~reg0_q  & !\Q[4]~15 ))

	.dataa(\Q[3]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[4]~15 ),
	.combout(\Q[3]~16_combout ),
	.cout(\Q[3]~17 ));
// synopsys translate_off
defparam \Q[3]~16 .lut_mask = 16'hA50A;
defparam \Q[3]~16 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[3]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[3]~16_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[3]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[3]~reg0 .is_wysiwyg = "true";
defparam \Q[3]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[2]~18 (
// Equation(s):
// \Q[2]~18_combout  = (\Q[2]~reg0_q  & (!\Q[3]~17 )) # (!\Q[2]~reg0_q  & ((\Q[3]~17 ) # (GND)))
// \Q[2]~19  = CARRY((!\Q[3]~17 ) # (!\Q[2]~reg0_q ))

	.dataa(\Q[2]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[3]~17 ),
	.combout(\Q[2]~18_combout ),
	.cout(\Q[2]~19 ));
// synopsys translate_off
defparam \Q[2]~18 .lut_mask = 16'h5A5F;
defparam \Q[2]~18 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[2]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[2]~18_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[2]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[2]~reg0 .is_wysiwyg = "true";
defparam \Q[2]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[1]~20 (
// Equation(s):
// \Q[1]~20_combout  = (\Q[1]~reg0_q  & (\Q[2]~19  $ (GND))) # (!\Q[1]~reg0_q  & (!\Q[2]~19  & VCC))
// \Q[1]~21  = CARRY((\Q[1]~reg0_q  & !\Q[2]~19 ))

	.dataa(\Q[1]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\Q[2]~19 ),
	.combout(\Q[1]~20_combout ),
	.cout(\Q[1]~21 ));
// synopsys translate_off
defparam \Q[1]~20 .lut_mask = 16'hA50A;
defparam \Q[1]~20 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[1]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[1]~20_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[1]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[1]~reg0 .is_wysiwyg = "true";
defparam \Q[1]~reg0 .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \Q[0]~22 (
// Equation(s):
// \Q[0]~22_combout  = \Q[0]~reg0_q  $ (\Q[1]~21 )

	.dataa(\Q[0]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(\Q[1]~21 ),
	.combout(\Q[0]~22_combout ),
	.cout());
// synopsys translate_off
defparam \Q[0]~22 .lut_mask = 16'h5A5A;
defparam \Q[0]~22 .sum_lutc_input = "cin";
// synopsys translate_on

dffeas \Q[0]~reg0 (
	.clk(\Clk~input_o ),
	.d(\Q[0]~22_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(\always0~0_combout ),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[0]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[0]~reg0 .is_wysiwyg = "true";
defparam \Q[0]~reg0 .power_up = "low";
// synopsys translate_on

assign Q[7] = \Q[7]~output_o ;

assign Q[6] = \Q[6]~output_o ;

assign Q[5] = \Q[5]~output_o ;

assign Q[4] = \Q[4]~output_o ;

assign Q[3] = \Q[3]~output_o ;

assign Q[2] = \Q[2]~output_o ;

assign Q[1] = \Q[1]~output_o ;

assign Q[0] = \Q[0]~output_o ;

endmodule
