// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.1.0 Build 590 10/25/2017 SJ Lite Edition"

// DATE "09/23/2021 16:53:02"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module AvertisseurLED (
	\Dist ,
	Led);
input 	[7:0] \Dist ;
output 	Led;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Dist[3]~input_o ;
wire \Dist[2]~input_o ;
wire \Dist[1]~input_o ;
wire \Dist[0]~input_o ;
wire \Led~output_o ;
wire \Dist[4]~input_o ;
wire \Dist[5]~input_o ;
wire \Dist[6]~input_o ;
wire \Dist[7]~input_o ;
wire \LessThan0~0_combout ;


cycloneive_io_obuf \Led~output (
	.i(!\LessThan0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Led~output_o ),
	.obar());
// synopsys translate_off
defparam \Led~output .bus_hold = "false";
defparam \Led~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Dist[4]~input (
	.i(\Dist [4]),
	.ibar(gnd),
	.o(\Dist[4]~input_o ));
// synopsys translate_off
defparam \Dist[4]~input .bus_hold = "false";
defparam \Dist[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[5]~input (
	.i(\Dist [5]),
	.ibar(gnd),
	.o(\Dist[5]~input_o ));
// synopsys translate_off
defparam \Dist[5]~input .bus_hold = "false";
defparam \Dist[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[6]~input (
	.i(\Dist [6]),
	.ibar(gnd),
	.o(\Dist[6]~input_o ));
// synopsys translate_off
defparam \Dist[6]~input .bus_hold = "false";
defparam \Dist[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[7]~input (
	.i(\Dist [7]),
	.ibar(gnd),
	.o(\Dist[7]~input_o ));
// synopsys translate_off
defparam \Dist[7]~input .bus_hold = "false";
defparam \Dist[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \LessThan0~0 (
// Equation(s):
// \LessThan0~0_combout  = (\Dist[4]~input_o ) # ((\Dist[5]~input_o ) # ((\Dist[6]~input_o ) # (\Dist[7]~input_o )))

	.dataa(\Dist[4]~input_o ),
	.datab(\Dist[5]~input_o ),
	.datac(\Dist[6]~input_o ),
	.datad(\Dist[7]~input_o ),
	.cin(gnd),
	.combout(\LessThan0~0_combout ),
	.cout());
// synopsys translate_off
defparam \LessThan0~0 .lut_mask = 16'hFFFE;
defparam \LessThan0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Dist[3]~input (
	.i(\Dist [3]),
	.ibar(gnd),
	.o(\Dist[3]~input_o ));
// synopsys translate_off
defparam \Dist[3]~input .bus_hold = "false";
defparam \Dist[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[2]~input (
	.i(\Dist [2]),
	.ibar(gnd),
	.o(\Dist[2]~input_o ));
// synopsys translate_off
defparam \Dist[2]~input .bus_hold = "false";
defparam \Dist[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[1]~input (
	.i(\Dist [1]),
	.ibar(gnd),
	.o(\Dist[1]~input_o ));
// synopsys translate_off
defparam \Dist[1]~input .bus_hold = "false";
defparam \Dist[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Dist[0]~input (
	.i(\Dist [0]),
	.ibar(gnd),
	.o(\Dist[0]~input_o ));
// synopsys translate_off
defparam \Dist[0]~input .bus_hold = "false";
defparam \Dist[0]~input .simulate_z_as = "z";
// synopsys translate_on

assign Led = \Led~output_o ;

endmodule
